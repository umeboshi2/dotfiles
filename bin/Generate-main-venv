#!/usr/bin/env python
from __future__ import absolute_import, division, print_function, unicode_literals
import os, sys
import subprocess
import tarfile
from optparse import OptionParser

LOCAL_DATA_PATH = os.environ.get('XDG_DATA_HOME')
if LOCAL_DATA_PATH is None:
    LOCAL_DATA_PATH = os.path.expanduser('~/.local/share')

DOTFILES_DATA = os.path.join(LOCAL_DATA_PATH, 'dotfiles')

PYTHON_PACKAGES = [
    'virtualenvwrapper',
    'youtube-dl',
    'rarfile',
    'beautifulsoup4',
    'GitPython',
    'nodeenv',
    'cookiecutter',
    'PyGithub',
    'requests',
    'bpython',
    'ipython',
    'httpie',
    'ansible',
]


def get_installed_pypkgs():
    cmd = ['pip', 'freeze']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    lines = []
    pkgs = []
    for line in proc.stdout:
        line = line.strip().decode()
        if line.startswith('-e'):
            pkg = line.split('#egg=')[1]
        else:
            if '==' not in line:
                raise RuntimeError("can't parse line '{}'".format(line))
            pkg = line.split('==')[0]
        pkgs.append(pkg)
    return pkgs

def is_install_pypkgs_needed():
    installed = get_installed_pypkgs()
    install_needed = False
    for pkg in PYTHON_PACKAGES:
        if pkg not in installed:
            print("{} not installed.".format(pkg))
            install_needed = True
            break
    return install_needed


def install_pypkgs(plist=PYTHON_PACKAGES):
    for pkg in plist:
        cmd = ['pip', 'install', pkg]
        subprocess.check_call(cmd)

minishift_release_url = "https://github.com/minishift/minishift/releases/download/v%(version)s/minishift-%(version)s-linux-amd64.tgz"

def minishift_asset_prefix(version):
    return 'minishift-%s-linux-amd64.tgz' % version



def check_minishift(version='1.8.0'):
    from github import Github
    import requests
    g = Github()
    repo = g.get_user('minishift').get_repo('minishift')
    release = repo.get_release('v%s' % version)
    assets = release.raw_data['assets']
    tarball = None
    cksum = None
    prefix = minishift_asset_prefix(version)
    for asset in assets:
        if asset['name'].startswith(prefix):
            if asset['name'] == prefix:
                tarball = asset
            elif asset['name'] == '%s.sha256' % prefix:
                cksum = asset
    if tarball is None or cksum is None:
        raise RuntimeError("oops")
    print(tarball)
    tfilename = os.path.join(DOTFILES_DATA, tarball['name'])
    if not os.path.isfile(tfilename):
        print("Downloading", tarball['browser_download_url'])
        tres = requests.get(tarball['browser_download_url'])
        if not tres.ok:
            raise RuntimeError("bad response")
        with open(tfilename, 'w') as outfile:
            outfile.write(tres.content)
    tfile = tarfile.open(tfilename)
    fn = [f for f in tfile.getnames() if f.endswith('/minishift')][0]
    
    with tarfile.open(tfilename) as tfile:
        fn = [f for f in tfile.getnames() if f.endswith('/minishift')][0]
        print(fn)
        extracted = tfile.extractfile(fn)
        binfile = '/usr/local/bin/minishift'
        with open(binfile, 'wb') as outfile:
            outfile.write(extracted.read())
    


# docker-machine-kvm
# https://docs.openshift.org/latest/minishift/getting-started/setting-up-driver-plugin.html
# sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.7.0/docker-machine-driver-kvm -o /usr/local/bin/docker-machine-driver-kvm
# sudo chmod +x /usr/local/bin/docker-machine-driver-kvm


            
if __name__ == '__main__':
    vpath = os.environ.get('VIRTUAL_ENV')
    if vpath is None:
        print("we must be in a virtualenv named main")
        sys.exit(1)
    venv = os.path.basename(vpath)
    if venv != 'main':
        print("we must be in a virtualenv named main")
        sys.exit(1)
    if not os.path.isdir(DOTFILES_DATA):
        print("Creating", DOTFILES_DATA)
        os.makedirs(DOTFILES_DATA)
    if is_install_pypkgs_needed():
        print("Installing python packages...")
        install_pypkgs()
    print("Setting up node environment...")
    cmd = [os.path.expanduser('~/bin/setup-nodeenv')]
    subprocess.check_call(cmd)
    print("DOTFILES_DATA", DOTFILES_DATA)

    #check_minishift()
    
