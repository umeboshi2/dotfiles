#!/usr/bin/env python
import os, sys
import subprocess
from optparse import OptionParser

# >= 100M
really_big_repos = [
    'mochajs/mocha',
    'twbs/bootstrap',
    'kripken/emscripten',
    'juj/emscripten-scummvm',
    'jquery/jquery-mobile',
    'photonstorm/phaser',
    'photonstorm/phaser-examples',
    'facebook/react',
    #'facebook/react-dom',
    ]

# > 20M
big_repos = [
    'ajaxorg/ace',
    'webpack/analyse',
    'jashkenas/backbone',
    'jashkenas/coffeescript',
    'd3/d3',
    'dchester/epilogue',
    'electron/electron',
    'FortAwesome/Font-Awesome',
    'TryGhost/Ghost',
    'TryGhost/Ghost-Admin',
    'jquery/jquery',
    'jquery/jquery-ui',
    'Leaflet/Leaflet',
    'moment/moment',
    'mapbox/node-sqlite3',
    'sequelize/sequelize',
    ]

python_repos = [
    # python 
    'Pylons/pyramid',
    'Pylons/pyramid_debugtoolbar',
    'Pylons/pyramid_tm',
    'Pylons/waitress',
    'Pylons/colander',
    'mozilla-services/cornice',
    ]

webpack_repos = [
    'webpack/webpack',
    'webpack/webpack-dev-server',
    'webpack/docs',
    'webpack/json-loader',
    'webpack/json5-loader',
    'webpack/css-loader',
    'webpack/url-loader',
    'webpack/file-loader',
    'webpack/worker-loader',
    'webpack/raw-loader',
    'webpack/coffee-loader',
    ]

node_dev_repos = [
    'bower/bower',
    'gulpjs/gulp',
    'gulpjs/gulp-cli',
    'gulpjs/gulp-util',
    ]

express_repos = [
    'expressjs/express',
    'expressjs/multer',
    'expressjs/session',
    'expressjs/body-parser',
    'expressjs/cookie-parser',
    'expressjs/express-paginate',
    'expressjs/errorhandler',
    'expressjs/compression',
    'expressjs/serve-favicon',
    'expressjs/serve-index',
    'expressjs/serve-static',
    'expressjs/cors',
    'expressjs/morgan',
    'expressjs/express-messages',
    'expressjs/express-resource',
    'expressjs/timeout',
    ]

backend_repos = [
    # nodejs backend
    'mweibel/connect-session-sequelize',
    'jaredhanson/passport',
    'jaredhanson/passport-facebook',
    'restify/node-restify',
    'mikec/kalamata',
    'mikec/kalamata-sample',
    'tgriesser/bookshelf',
    'tgriesser/knex',
    'tgriesser/knex.wiki',
    'brianc/node-postgres',
    'mapbox/node-sqlite3.wiki',
    'petkaantonov/bluebird',
    'rauchg/ms.js',
    ]

base_vendor_repos = [
    'marionettejs/backbone.marionette',
    'marionettejs/backbone.radio',
    'jashkenas/underscore',
    'jquery/sizzle',
    'thedersen/backbone.validation',
    'goodeggs/teacup',
    'umeboshi2/bootstrap-teacup-templates',
    'umeboshi2/marionette-form-view',
    'chjj/marked',
    ]

used_frontend_repos = [
    'thlorenz/brace',
    'fullcalendar/fullcalendar',
    'desandro/masonry',
    ]


unused_repos = [
    'TryGhost/Ghost-Desktop',
    # frontend
    'jquery/jquery-color',
    'bergie/hallo',
    'bergie/create',
    'bergie/VIE',
    'photonstorm/lazer',
    'curiousdannii/parchment',
    'curiousdannii/ifvms.js',
    'curiousdannii/gnusto',
    'hurrymaplelad/teact',
    'Leaflet/Leaflet.Icon.Glyph',
    'Leaflet/Leaflet.fullscreen',
    'davetimmins/leaflet-wunderground-layer',
    'esri/esri-leaflet',
    'icflorescu/openshift-cartridge-nodejs',
    # not really vendor stack
    'jhlywa/chess.js',
    'curiousdannii/parchment',
    'curiousdannii/gnusto',
    'Stuk/jszip',
    'fengyuanchen/viewerjs',
    ]


repo_dict = dict(toobig=really_big_repos,
                 big=big_repos,
                 python=python_repos,
                 webpack=webpack_repos,
                 node=node_dev_repos,
                 express=express_repos,
                 backend=backend_repos,
                 fe_base=base_vendor_repos,
                 fe_used=used_frontend_repos,
                 unused=unused_repos,
                 )

repos = webpack_repos + node_dev_repos + express_repos + backend_repos
repos += base_vendor_repos + used_frontend_repos + unused_repos


parent_directory = os.path.expanduser('~/workspace/vendorstack')

if not os.path.isdir(parent_directory):
    os.makedirs(parent_directory)

def clone_repo(url, pdir, dirname=None):
    here = os.getcwd()
    os.chdir(pdir)
    cmd = ['git', 'clone', url]
    if dirname is not None:
        cmd.append(dirname)
    subprocess.check_call(cmd)
    os.chdir(here)
    

def update_repo(url, pdir, dirname=None):
    here = os.getcwd()
    cmd = ['git', 'clone', url]
    if dirname is not None:
        cmd.append(dirname)
    subprocess.check_call(cmd)
    os.chdir(here)
    
def make_github_url(repo):
    return 'git@github.com:%s.git' % repo

def clone_github_repo(repo, pdir):
    url = make_github_url(repo)
    clone_repo(url, pdir)


parser = OptionParser()
parser.add_option('-p', '--pull', action='store_true', dest='pullrepo',
                  default=False)

opts, args = parser.parse_args(sys.argv[1:])

for section in repo_dict:
    pdir = os.path.join(parent_directory, section)
    if not os.path.isdir(pdir):
        print "Creating", pdir
        os.makedirs(pdir)
    for r in repo_dict[section]:
        dirname = os.path.join(pdir, os.path.basename(r))
        if not os.path.isdir(dirname):
            print "cloning", r
            clone_github_repo(r, pdir)
        else:
            if opts.pullrepo:
                here = os.getcwd()
                os.chdir(dirname)
                retval = subprocess.call(['git', 'pull'])
                print "pulled", r
                if retval:
                    print r, "BAD PULL++++++++++++++++++++++++++++++++++++"
                retval = subprocess.call(['git', 'fetch', '--all'])
                print "fetched", r
                if retval:
                    print r, "BAD fetch++++++++++++++++++++++++++++++++++++"
                os.chdir(here)
            else:
                print "Skipped", r
